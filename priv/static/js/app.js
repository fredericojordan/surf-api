/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "../deps/phoenix_html/priv/static/phoenix_html.js":
/*!********************************************************!*\
  !*** ../deps/phoenix_html/priv/static/phoenix_html.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n(function () {\n  var PolyfillEvent = eventConstructor();\n\n  function eventConstructor() {\n    if (typeof window.CustomEvent === \"function\") return window.CustomEvent; // IE<=9 Support\n\n    function CustomEvent(event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n    return CustomEvent;\n  }\n\n  function buildHiddenInput(name, value) {\n    var input = document.createElement(\"input\");\n    input.type = \"hidden\";\n    input.name = name;\n    input.value = value;\n    return input;\n  }\n\n  function handleClick(element) {\n    var to = element.getAttribute(\"data-to\"),\n        method = buildHiddenInput(\"_method\", element.getAttribute(\"data-method\")),\n        csrf = buildHiddenInput(\"_csrf_token\", element.getAttribute(\"data-csrf\")),\n        form = document.createElement(\"form\"),\n        target = element.getAttribute(\"target\");\n    form.method = element.getAttribute(\"data-method\") === \"get\" ? \"get\" : \"post\";\n    form.action = to;\n    form.style.display = \"hidden\";\n    if (target) form.target = target;\n    form.appendChild(csrf);\n    form.appendChild(method);\n    document.body.appendChild(form);\n    form.submit();\n  }\n\n  window.addEventListener(\"click\", function (e) {\n    var element = e.target;\n\n    while (element && element.getAttribute) {\n      var phoenixLinkEvent = new PolyfillEvent('phoenix.link.click', {\n        \"bubbles\": true,\n        \"cancelable\": true\n      });\n\n      if (!element.dispatchEvent(phoenixLinkEvent)) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return false;\n      }\n\n      if (element.getAttribute(\"data-method\")) {\n        handleClick(element);\n        e.preventDefault();\n        return false;\n      } else {\n        element = element.parentNode;\n      }\n    }\n  }, false);\n  window.addEventListener('phoenix.link.click', function (e) {\n    var message = e.target.getAttribute(\"data-confirm\");\n\n    if (message && !window.confirm(message)) {\n      e.preventDefault();\n    }\n  }, false);\n})();\n\n//# sourceURL=webpack:///../deps/phoenix_html/priv/static/phoenix_html.js?");

/***/ }),

/***/ "./css/app.css":
/*!*********************!*\
  !*** ./css/app.css ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n\n//# sourceURL=webpack:///./css/app.css?");

/***/ }),

/***/ "./js/app.js":
/*!*******************!*\
  !*** ./js/app.js ***!
  \*******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _css_app_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../css/app.css */ \"./css/app.css\");\n/* harmony import */ var _css_app_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_css_app_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phoenix_html */ \"../deps/phoenix_html/priv/static/phoenix_html.js\");\n/* harmony import */ var phoenix_html__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phoenix_html__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _chartkick_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chartkick.js */ \"./js/chartkick.js\");\n/* harmony import */ var _chartkick_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_chartkick_js__WEBPACK_IMPORTED_MODULE_2__);\n// We need to import the CSS so that webpack will load it.\n// The MiniCssExtractPlugin is used to separate it out into\n// its own CSS file.\n // webpack automatically bundles all modules in your\n// entry points. Those entry points can be configured\n// in \"webpack.config.js\".\n//\n// Import dependencies\n//\n\n // Import local files\n//\n// Local files can be imported directly using relative paths, for example:\n// import socket from \"./socket\"\n\n\n\n//# sourceURL=webpack:///./js/app.js?");

/***/ }),

/***/ "./js/chartkick.js":
/*!*************************!*\
  !*** ./js/chartkick.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Chartkick.js\n * Create beautiful Javascript charts with minimal code\n * https://github.com/ankane/chartkick.js\n * v1.4.1\n * MIT License\n */\n\n/*jslint browser: true, indent: 2, plusplus: true, vars: true */\n(function (window) {\n  'use strict';\n\n  var config = window.Chartkick || {};\n  var Chartkick,\n      ISO8601_PATTERN,\n      DECIMAL_SEPARATOR,\n      adapters = []; // helpers\n\n  function isArray(variable) {\n    return Object.prototype.toString.call(variable) === \"[object Array]\";\n  }\n\n  function isFunction(variable) {\n    return variable instanceof Function;\n  }\n\n  function isPlainObject(variable) {\n    return !isFunction(variable) && variable instanceof Object;\n  } // https://github.com/madrobby/zepto/blob/master/src/zepto.js\n\n\n  function extend(target, source) {\n    var key;\n\n    for (key in source) {\n      if (isPlainObject(source[key]) || isArray(source[key])) {\n        if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\n          target[key] = {};\n        }\n\n        if (isArray(source[key]) && !isArray(target[key])) {\n          target[key] = [];\n        }\n\n        extend(target[key], source[key]);\n      } else if (source[key] !== undefined) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  function merge(obj1, obj2) {\n    var target = {};\n    extend(target, obj1);\n    extend(target, obj2);\n    return target;\n  } // https://github.com/Do/iso8601.js\n\n\n  ISO8601_PATTERN = /(\\d\\d\\d\\d)(\\-)?(\\d\\d)(\\-)?(\\d\\d)(T)?(\\d\\d)(:)?(\\d\\d)?(:)?(\\d\\d)?([\\.,]\\d+)?($|Z|([\\+\\-])(\\d\\d)(:)?(\\d\\d)?)/i;\n  DECIMAL_SEPARATOR = String(1.5).charAt(1);\n\n  function parseISO8601(input) {\n    var day, hour, matches, milliseconds, minutes, month, offset, result, seconds, type, year;\n    type = Object.prototype.toString.call(input);\n\n    if (type === '[object Date]') {\n      return input;\n    }\n\n    if (type !== '[object String]') {\n      return;\n    }\n\n    if (matches = input.match(ISO8601_PATTERN)) {\n      year = parseInt(matches[1], 10);\n      month = parseInt(matches[3], 10) - 1;\n      day = parseInt(matches[5], 10);\n      hour = parseInt(matches[7], 10);\n      minutes = matches[9] ? parseInt(matches[9], 10) : 0;\n      seconds = matches[11] ? parseInt(matches[11], 10) : 0;\n      milliseconds = matches[12] ? parseFloat(DECIMAL_SEPARATOR + matches[12].slice(1)) * 1000 : 0;\n      result = Date.UTC(year, month, day, hour, minutes, seconds, milliseconds);\n\n      if (matches[13] && matches[14]) {\n        offset = matches[15] * 60;\n\n        if (matches[17]) {\n          offset += parseInt(matches[17], 10);\n        }\n\n        offset *= matches[14] === '-' ? -1 : 1;\n        result -= offset * 60 * 1000;\n      }\n\n      return new Date(result);\n    }\n  } // end iso8601.js\n\n\n  function negativeValues(series) {\n    var i, j, data;\n\n    for (i = 0; i < series.length; i++) {\n      data = series[i].data;\n\n      for (j = 0; j < data.length; j++) {\n        if (data[j][1] < 0) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function jsOptionsFunc(defaultOptions, hideLegend, setMin, setMax, setStacked, setXtitle, setYtitle) {\n    return function (series, opts, chartOptions) {\n      var options = merge({}, defaultOptions);\n      options = merge(options, chartOptions || {}); // hide legend\n      // this is *not* an external option!\n\n      if (opts.hideLegend) {\n        hideLegend(options);\n      } // min\n\n\n      if (\"min\" in opts) {\n        setMin(options, opts.min);\n      } else if (!negativeValues(series)) {\n        setMin(options, 0);\n      } // max\n\n\n      if (opts.max) {\n        setMax(options, opts.max);\n      }\n\n      if (opts.stacked) {\n        setStacked(options);\n      }\n\n      if (opts.colors) {\n        options.colors = opts.colors;\n      }\n\n      if (opts.xtitle) {\n        setXtitle(options, opts.xtitle);\n      }\n\n      if (opts.ytitle) {\n        setYtitle(options, opts.ytitle);\n      } // merge library last\n\n\n      options = merge(options, opts.library || {});\n      return options;\n    };\n  }\n\n  function setText(element, text) {\n    if (document.body.innerText) {\n      element.innerText = text;\n    } else {\n      element.textContent = text;\n    }\n  }\n\n  function chartError(element, message) {\n    setText(element, \"Error Loading Chart: \" + message);\n    element.style.color = \"#ff0000\";\n  }\n\n  function getJSON(element, url, success) {\n    var $ = window.jQuery || window.Zepto || window.$;\n    $.ajax({\n      dataType: \"json\",\n      url: url,\n      success: success,\n      error: function error(jqXHR, textStatus, errorThrown) {\n        var message = typeof errorThrown === \"string\" ? errorThrown : errorThrown.message;\n        chartError(element, message);\n      }\n    });\n  }\n\n  function errorCatcher(chart, callback) {\n    try {\n      callback(chart);\n    } catch (err) {\n      chartError(chart.element, err.message);\n      throw err;\n    }\n  }\n\n  function fetchDataSource(chart, callback) {\n    if (typeof chart.dataSource === \"string\") {\n      getJSON(chart.element, chart.dataSource, function (data, textStatus, jqXHR) {\n        chart.data = data;\n        errorCatcher(chart, callback);\n      });\n    } else {\n      chart.data = chart.dataSource;\n      errorCatcher(chart, callback);\n    }\n  } // type conversions\n\n\n  function toStr(n) {\n    return \"\" + n;\n  }\n\n  function toFloat(n) {\n    return parseFloat(n);\n  }\n\n  function toDate(n) {\n    if (_typeof(n) !== \"object\") {\n      if (typeof n === \"number\") {\n        n = new Date(n * 1000); // ms\n      } else {\n        // str\n        // try our best to get the str into iso8601\n        // TODO be smarter about this\n        var str = n.replace(/ /, \"T\").replace(\" \", \"\").replace(\"UTC\", \"Z\");\n        n = parseISO8601(str) || new Date(n);\n      }\n    }\n\n    return n;\n  }\n\n  function toArr(n) {\n    if (!isArray(n)) {\n      var arr = [],\n          i;\n\n      for (i in n) {\n        if (n.hasOwnProperty(i)) {\n          arr.push([i, n[i]]);\n        }\n      }\n\n      n = arr;\n    }\n\n    return n;\n  }\n\n  function sortByTime(a, b) {\n    return a[0].getTime() - b[0].getTime();\n  }\n\n  if (\"Highcharts\" in window) {\n    var HighchartsAdapter = new function () {\n      var Highcharts = window.Highcharts;\n      this.name = \"highcharts\";\n      var defaultOptions = {\n        chart: {},\n        xAxis: {\n          title: {\n            text: null\n          },\n          labels: {\n            style: {\n              fontSize: \"12px\"\n            }\n          }\n        },\n        yAxis: {\n          title: {\n            text: null\n          },\n          labels: {\n            style: {\n              fontSize: \"12px\"\n            }\n          }\n        },\n        title: {\n          text: null\n        },\n        credits: {\n          enabled: false\n        },\n        legend: {\n          borderWidth: 0\n        },\n        tooltip: {\n          style: {\n            fontSize: \"12px\"\n          }\n        },\n        plotOptions: {\n          areaspline: {},\n          series: {\n            marker: {}\n          }\n        }\n      };\n\n      var hideLegend = function hideLegend(options) {\n        options.legend.enabled = false;\n      };\n\n      var setMin = function setMin(options, min) {\n        options.yAxis.min = min;\n      };\n\n      var setMax = function setMax(options, max) {\n        options.yAxis.max = max;\n      };\n\n      var setStacked = function setStacked(options) {\n        options.plotOptions.series.stacking = \"normal\";\n      };\n\n      var setXtitle = function setXtitle(options, title) {\n        options.xAxis.title.text = title;\n      };\n\n      var setYtitle = function setYtitle(options, title) {\n        options.yAxis.title.text = title;\n      };\n\n      var jsOptions = jsOptionsFunc(defaultOptions, hideLegend, setMin, setMax, setStacked, setXtitle, setYtitle);\n\n      this.renderLineChart = function (chart, chartType) {\n        chartType = chartType || \"spline\";\n        var chartOptions = {};\n\n        if (chartType === \"areaspline\") {\n          chartOptions = {\n            plotOptions: {\n              areaspline: {\n                stacking: \"normal\"\n              },\n              series: {\n                marker: {\n                  enabled: false\n                }\n              }\n            }\n          };\n        }\n\n        var options = jsOptions(chart.data, chart.options, chartOptions),\n            data,\n            i,\n            j;\n        options.xAxis.type = chart.options.discrete ? \"category\" : \"datetime\";\n        options.chart.type = chartType;\n        options.chart.renderTo = chart.element.id;\n        var series = chart.data;\n\n        for (i = 0; i < series.length; i++) {\n          data = series[i].data;\n\n          if (!chart.options.discrete) {\n            for (j = 0; j < data.length; j++) {\n              data[j][0] = data[j][0].getTime();\n            }\n          }\n\n          series[i].marker = {\n            symbol: \"circle\"\n          };\n        }\n\n        options.series = series;\n        new Highcharts.Chart(options);\n      };\n\n      this.renderScatterChart = function (chart) {\n        var chartOptions = {};\n        var options = jsOptions(chart.data, chart.options, chartOptions);\n        options.chart.type = 'scatter';\n        options.chart.renderTo = chart.element.id;\n        options.series = chart.data;\n        new Highcharts.Chart(options);\n      };\n\n      this.renderPieChart = function (chart) {\n        var chartOptions = {};\n\n        if (chart.options.colors) {\n          chartOptions.colors = chart.options.colors;\n        }\n\n        var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});\n        options.chart.renderTo = chart.element.id;\n        options.series = [{\n          type: \"pie\",\n          name: \"Value\",\n          data: chart.data\n        }];\n        new Highcharts.Chart(options);\n      };\n\n      this.renderColumnChart = function (chart, chartType) {\n        var chartType = chartType || \"column\";\n        var series = chart.data;\n        var options = jsOptions(series, chart.options),\n            i,\n            j,\n            s,\n            d,\n            rows = [];\n        options.chart.type = chartType;\n        options.chart.renderTo = chart.element.id;\n\n        for (i = 0; i < series.length; i++) {\n          s = series[i];\n\n          for (j = 0; j < s.data.length; j++) {\n            d = s.data[j];\n\n            if (!rows[d[0]]) {\n              rows[d[0]] = new Array(series.length);\n            }\n\n            rows[d[0]][i] = d[1];\n          }\n        }\n\n        var categories = [];\n\n        for (i in rows) {\n          if (rows.hasOwnProperty(i)) {\n            categories.push(i);\n          }\n        }\n\n        options.xAxis.categories = categories;\n        var newSeries = [];\n\n        for (i = 0; i < series.length; i++) {\n          d = [];\n\n          for (j = 0; j < categories.length; j++) {\n            d.push(rows[categories[j]][i] || 0);\n          }\n\n          newSeries.push({\n            name: series[i].name,\n            data: d\n          });\n        }\n\n        options.series = newSeries;\n        new Highcharts.Chart(options);\n      };\n\n      var self = this;\n\n      this.renderBarChart = function (chart) {\n        self.renderColumnChart(chart, \"bar\");\n      };\n\n      this.renderAreaChart = function (chart) {\n        self.renderLineChart(chart, \"areaspline\");\n      };\n    }();\n    adapters.push(HighchartsAdapter);\n  }\n\n  if (window.google && window.google.setOnLoadCallback) {\n    var GoogleChartsAdapter = new function () {\n      var google = window.google;\n      this.name = \"google\";\n      var loaded = {};\n      var callbacks = [];\n\n      var runCallbacks = function runCallbacks() {\n        var cb, call;\n\n        for (var i = 0; i < callbacks.length; i++) {\n          cb = callbacks[i];\n          call = google.visualization && (cb.pack === \"corechart\" && google.visualization.LineChart || cb.pack === \"timeline\" && google.visualization.Timeline);\n\n          if (call) {\n            cb.callback();\n            callbacks.splice(i, 1);\n            i--;\n          }\n        }\n      };\n\n      var waitForLoaded = function waitForLoaded(pack, callback) {\n        if (!callback) {\n          callback = pack;\n          pack = \"corechart\";\n        }\n\n        callbacks.push({\n          pack: pack,\n          callback: callback\n        });\n\n        if (loaded[pack]) {\n          runCallbacks();\n        } else {\n          loaded[pack] = true; // https://groups.google.com/forum/#!topic/google-visualization-api/fMKJcyA2yyI\n\n          var loadOptions = {\n            packages: [pack],\n            callback: runCallbacks\n          };\n\n          if (config.language) {\n            loadOptions.language = config.language;\n          }\n\n          google.load(\"visualization\", \"1\", loadOptions);\n        }\n      }; // Set chart options\n\n\n      var defaultOptions = {\n        chartArea: {},\n        fontName: \"'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif\",\n        pointSize: 6,\n        legend: {\n          textStyle: {\n            fontSize: 12,\n            color: \"#444\"\n          },\n          alignment: \"center\",\n          position: \"right\"\n        },\n        curveType: \"function\",\n        hAxis: {\n          textStyle: {\n            color: \"#666\",\n            fontSize: 12\n          },\n          titleTextStyle: {},\n          gridlines: {\n            color: \"transparent\"\n          },\n          baselineColor: \"#ccc\",\n          viewWindow: {}\n        },\n        vAxis: {\n          textStyle: {\n            color: \"#666\",\n            fontSize: 12\n          },\n          titleTextStyle: {},\n          baselineColor: \"#ccc\",\n          viewWindow: {}\n        },\n        tooltip: {\n          textStyle: {\n            color: \"#666\",\n            fontSize: 12\n          }\n        }\n      };\n\n      var hideLegend = function hideLegend(options) {\n        options.legend.position = \"none\";\n      };\n\n      var setMin = function setMin(options, min) {\n        options.vAxis.viewWindow.min = min;\n      };\n\n      var setMax = function setMax(options, max) {\n        options.vAxis.viewWindow.max = max;\n      };\n\n      var setBarMin = function setBarMin(options, min) {\n        options.hAxis.viewWindow.min = min;\n      };\n\n      var setBarMax = function setBarMax(options, max) {\n        options.hAxis.viewWindow.max = max;\n      };\n\n      var setStacked = function setStacked(options) {\n        options.isStacked = true;\n      };\n\n      var setXtitle = function setXtitle(options, title) {\n        options.hAxis.title = title;\n        options.hAxis.titleTextStyle.italic = false;\n      };\n\n      var setYtitle = function setYtitle(options, title) {\n        options.vAxis.title = title;\n        options.vAxis.titleTextStyle.italic = false;\n      };\n\n      var jsOptions = jsOptionsFunc(defaultOptions, hideLegend, setMin, setMax, setStacked, setXtitle, setYtitle); // cant use object as key\n\n      var createDataTable = function createDataTable(series, columnType) {\n        var data = new google.visualization.DataTable();\n        data.addColumn(columnType, \"\");\n        var i,\n            j,\n            s,\n            d,\n            key,\n            rows = [];\n\n        for (i = 0; i < series.length; i++) {\n          s = series[i];\n          data.addColumn(\"number\", s.name);\n\n          for (j = 0; j < s.data.length; j++) {\n            d = s.data[j];\n            key = columnType === \"datetime\" ? d[0].getTime() : d[0];\n\n            if (!rows[key]) {\n              rows[key] = new Array(series.length);\n            }\n\n            rows[key][i] = toFloat(d[1]);\n          }\n        }\n\n        var rows2 = [];\n        var value;\n\n        for (i in rows) {\n          if (rows.hasOwnProperty(i)) {\n            if (columnType === \"datetime\") {\n              value = new Date(toFloat(i));\n            } else if (columnType === \"number\") {\n              value = toFloat(i);\n            } else {\n              value = i;\n            }\n\n            rows2.push([value].concat(rows[i]));\n          }\n        }\n\n        if (columnType === \"datetime\") {\n          rows2.sort(sortByTime);\n        }\n\n        data.addRows(rows2);\n        return data;\n      };\n\n      var resize = function resize(callback) {\n        if (window.attachEvent) {\n          window.attachEvent(\"onresize\", callback);\n        } else if (window.addEventListener) {\n          window.addEventListener(\"resize\", callback, true);\n        }\n\n        callback();\n      };\n\n      this.renderLineChart = function (chart) {\n        waitForLoaded(function () {\n          var options = jsOptions(chart.data, chart.options);\n          var data = createDataTable(chart.data, chart.options.discrete ? \"string\" : \"datetime\");\n          chart.chart = new google.visualization.LineChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderPieChart = function (chart) {\n        waitForLoaded(function () {\n          var chartOptions = {\n            chartArea: {\n              top: \"10%\",\n              height: \"80%\"\n            }\n          };\n\n          if (chart.options.colors) {\n            chartOptions.colors = chart.options.colors;\n          }\n\n          var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});\n          var data = new google.visualization.DataTable();\n          data.addColumn(\"string\", \"\");\n          data.addColumn(\"number\", \"Value\");\n          data.addRows(chart.data);\n          chart.chart = new google.visualization.PieChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderColumnChart = function (chart) {\n        waitForLoaded(function () {\n          var options = jsOptions(chart.data, chart.options);\n          var data = createDataTable(chart.data, \"string\");\n          chart.chart = new google.visualization.ColumnChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderBarChart = function (chart) {\n        waitForLoaded(function () {\n          var chartOptions = {\n            hAxis: {\n              gridlines: {\n                color: \"#ccc\"\n              }\n            }\n          };\n          var options = jsOptionsFunc(defaultOptions, hideLegend, setBarMin, setBarMax, setStacked)(chart.data, chart.options, chartOptions);\n          var data = createDataTable(chart.data, \"string\");\n          chart.chart = new google.visualization.BarChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderAreaChart = function (chart) {\n        waitForLoaded(function () {\n          var chartOptions = {\n            isStacked: true,\n            pointSize: 0,\n            areaOpacity: 0.5\n          };\n          var options = jsOptions(chart.data, chart.options, chartOptions);\n          var data = createDataTable(chart.data, chart.options.discrete ? \"string\" : \"datetime\");\n          chart.chart = new google.visualization.AreaChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderGeoChart = function (chart) {\n        waitForLoaded(function () {\n          var chartOptions = {\n            legend: \"none\",\n            colorAxis: {\n              colors: chart.options.colors || [\"#f6c7b6\", \"#ce502d\"]\n            }\n          };\n          var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});\n          var data = new google.visualization.DataTable();\n          data.addColumn(\"string\", \"\");\n          data.addColumn(\"number\", \"Value\");\n          data.addRows(chart.data);\n          chart.chart = new google.visualization.GeoChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderScatterChart = function (chart) {\n        waitForLoaded(function () {\n          var chartOptions = {};\n          var options = jsOptions(chart.data, chart.options, chartOptions);\n          var data = createDataTable(chart.data, \"number\");\n          chart.chart = new google.visualization.ScatterChart(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n\n      this.renderTimeline = function (chart) {\n        waitForLoaded(\"timeline\", function () {\n          var chartOptions = {\n            legend: \"none\"\n          };\n\n          if (chart.options.colors) {\n            chartOptions.colors = chart.options.colors;\n          }\n\n          var options = merge(merge(defaultOptions, chartOptions), chart.options.library || {});\n          var data = new google.visualization.DataTable();\n          data.addColumn({\n            type: \"string\",\n            id: \"Name\"\n          });\n          data.addColumn({\n            type: \"date\",\n            id: \"Start\"\n          });\n          data.addColumn({\n            type: \"date\",\n            id: \"End\"\n          });\n          data.addRows(chart.data);\n          chart.chart = new google.visualization.Timeline(chart.element);\n          resize(function () {\n            chart.chart.draw(data, options);\n          });\n        });\n      };\n    }();\n    adapters.push(GoogleChartsAdapter);\n  } // TODO remove chartType if cross-browser way\n  // to get the name of the chart class\n\n\n  function renderChart(chartType, chart) {\n    var i, adapter, fnName, adapterName;\n    fnName = \"render\" + chartType;\n    adapterName = chart.options.adapter;\n\n    for (i = 0; i < adapters.length; i++) {\n      adapter = adapters[i];\n\n      if ((!adapterName || adapterName === adapter.name) && isFunction(adapter[fnName])) {\n        return adapter[fnName](chart);\n      }\n    }\n\n    throw new Error(\"No adapter found\");\n  } // process data\n\n\n  var toFormattedKey = function toFormattedKey(key, keyType) {\n    if (keyType === \"number\") {\n      key = toFloat(key);\n    } else if (keyType === \"datetime\") {\n      key = toDate(key);\n    } else {\n      key = toStr(key);\n    }\n\n    return key;\n  };\n\n  var formatSeriesData = function formatSeriesData(data, keyType) {\n    var r = [],\n        key,\n        j;\n\n    for (j = 0; j < data.length; j++) {\n      key = toFormattedKey(data[j][0], keyType);\n      r.push([key, toFloat(data[j][1])]);\n    }\n\n    if (keyType === \"datetime\") {\n      r.sort(sortByTime);\n    }\n\n    return r;\n  };\n\n  function processSeries(series, opts, keyType) {\n    var i; // see if one series or multiple\n\n    if (!isArray(series) || _typeof(series[0]) !== \"object\" || isArray(series[0])) {\n      series = [{\n        name: \"Value\",\n        data: series\n      }];\n      opts.hideLegend = true;\n    } else {\n      opts.hideLegend = false;\n    }\n\n    if (opts.discrete) {\n      keyType = \"string\";\n    } // right format\n\n\n    for (i = 0; i < series.length; i++) {\n      series[i].data = formatSeriesData(toArr(series[i].data), keyType);\n    }\n\n    return series;\n  }\n\n  function processSimple(data) {\n    var perfectData = toArr(data),\n        i;\n\n    for (i = 0; i < perfectData.length; i++) {\n      perfectData[i] = [toStr(perfectData[i][0]), toFloat(perfectData[i][1])];\n    }\n\n    return perfectData;\n  }\n\n  function processTime(data) {\n    var i;\n\n    for (i = 0; i < data.length; i++) {\n      data[i][1] = toDate(data[i][1]);\n      data[i][2] = toDate(data[i][2]);\n    }\n\n    return data;\n  }\n\n  function processLineData(chart) {\n    chart.data = processSeries(chart.data, chart.options, \"datetime\");\n    renderChart(\"LineChart\", chart);\n  }\n\n  function processColumnData(chart) {\n    chart.data = processSeries(chart.data, chart.options, \"string\");\n    renderChart(\"ColumnChart\", chart);\n  }\n\n  function processPieData(chart) {\n    chart.data = processSimple(chart.data);\n    renderChart(\"PieChart\", chart);\n  }\n\n  function processBarData(chart) {\n    chart.data = processSeries(chart.data, chart.options, \"string\");\n    renderChart(\"BarChart\", chart);\n  }\n\n  function processAreaData(chart) {\n    chart.data = processSeries(chart.data, chart.options, \"datetime\");\n    renderChart(\"AreaChart\", chart);\n  }\n\n  function processGeoData(chart) {\n    chart.data = processSimple(chart.data);\n    renderChart(\"GeoChart\", chart);\n  }\n\n  function processScatterData(chart) {\n    chart.data = processSeries(chart.data, chart.options, \"number\");\n    renderChart(\"ScatterChart\", chart);\n  }\n\n  function processTimelineData(chart) {\n    chart.data = processTime(chart.data);\n    renderChart(\"Timeline\", chart);\n  }\n\n  function setElement(chart, element, dataSource, opts, callback) {\n    if (typeof element === \"string\") {\n      element = document.getElementById(element);\n    }\n\n    chart.element = element;\n    chart.options = opts || {};\n    chart.dataSource = dataSource;\n    Chartkick.charts[element.id] = chart;\n    fetchDataSource(chart, callback);\n  } // define classes\n\n\n  Chartkick = {\n    LineChart: function LineChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processLineData);\n    },\n    PieChart: function PieChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processPieData);\n    },\n    ColumnChart: function ColumnChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processColumnData);\n    },\n    BarChart: function BarChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processBarData);\n    },\n    AreaChart: function AreaChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processAreaData);\n    },\n    GeoChart: function GeoChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processGeoData);\n    },\n    ScatterChart: function ScatterChart(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processScatterData);\n    },\n    Timeline: function Timeline(element, dataSource, opts) {\n      setElement(this, element, dataSource, opts, processTimelineData);\n    },\n    charts: {}\n  };\n  window.Chartkick = Chartkick;\n})(window);\n\n//# sourceURL=webpack:///./js/chartkick.js?");

/***/ }),

/***/ 0:
/*!*************************!*\
  !*** multi ./js/app.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./js/app.js */\"./js/app.js\");\n\n\n//# sourceURL=webpack:///multi_./js/app.js?");

/***/ })

/******/ });